{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>Das folgende Programm ist im Rahmen eines schulischen Projektes entstanden. Das Ziel dieses Projektes war es, ein Programm mit einer Datenbank zu verkn\u00fcpfen. Da ich seit l\u00e4ngerem mit der Programmiersprache Rust arbeiten wollte, habe ich dieses Projekt als API in Rust programmiert. Daf\u00fcr habe ich haupts\u00e4chlich das Rust Web Framework Rocket benutzt und dies mit einer mysql Datenbank verkn\u00fcpft. Das Projekt soll sp\u00e4ter um eine Weboberfl\u00e4che erweitert werden. Das Projekt ist auf Github zu finden. Die folgende Dokumentation soll meine Arbeitsweise zeigen und die Nutzung der API erkl\u00e4ren. Ideen, die ich noch nicht implementiert habe, aber f\u00fcr die Zukunft plane, werden, genauso wie der Fortschritt an diesen, auch in dieser Dokumentation vorhanden sein.</p>"},{"location":"index.html#projektbeschreibung","title":"Projektbeschreibung","text":"<p>Bei dem erstellten Programm k\u00f6nnen Manga-Leser einen Account anlegen und diesen nutzten, um Listen zu erstellen, in denen sie speichern k\u00f6nnen, welches Kapitel eines Mangas sie zuletzt gelesen haben. Wenn der Nutzer ein Admin ist, kann dieser zus\u00e4tzlich neue Mangas anlegen, die in einer vorhandenen Datenbank gespeichert werden.  Zum Speichern einer Anmeldung wird jedes Mal eine UUID-v4 erstellt, die als Session-Cookie gespeichert wird. Das hier erstellte Backend verf\u00fcgt noch nicht \u00fcber  eine f\u00fcr den Benutzer einfach zug\u00e4ngliche Schnittstelle, kann aber \u00fcber den Browser und Programme wie zum Beispiel Postman genutzt werden.</p>"},{"location":"index.html#zukunftige-funktionen","title":"Zuk\u00fcnftige Funktionen","text":"<p>Die geplanten Funktionen sind ihrer Priorit\u00e4t nach sortiert:</p> <ul> <li>Passw\u00f6rter als Hash speichern (f\u00fcr Testversion nicht erforderlich)</li> <li>DELETE Endpoints erstellen (aus Zeitmangel noch nicht erstellt)</li> <li>R\u00fcckgaben sind derzeit nicht einheitlich und sollen standardisiert werden</li> <li>Ein Python-Script soll jede Stunde die Mangas aus der Datenbank auf neue Kapitel \u00fcberpr\u00fcfen und aktualisieren </li> <li>Ein Discord-Bot mit folgenden Features soll erstellt werden:<ul> <li>\u00dcber neue Kapitel benachrichtigen </li> <li>Generelle Funktionen der API (Liste erstellen, Manga hinzuf\u00fcgen, neustes gelesenes Kapitel \u00e4ndern u.s.w.)</li> <li>spezifische Discord-Rollen sollen Zugriff auf die Admin-Funktionen der API regeln </li> </ul> </li> <li>Weboberfl\u00e4che, um die API von verschiedenen Ger\u00e4ten aus nutzen zu k\u00f6nnen</li> </ul>"},{"location":"index.html#fazit","title":"Fazit","text":"<p>Die Arbeit an diesem Projekt hat mir viel Spa\u00df bereitet, da ich zum ersten Mal richtig mit Rust gearbeitet habe.  Ich bin an Python gew\u00f6hnt, weshalb Rust zu lernen eine neue Herausforderung f\u00fcr mich war. Zus\u00e4tzlich habe ich noch nie eine API erstellt oder vorher mit Datenbanken gearbeitet. Daher konnte ich in diesem Projekt viel Neues lernen. </p> <p>Die meisten Probleme hatte ich bei der Arbeit mit der mysql-library und einer grafischen Anwendung in Rust, weshalb ich meine Anwendung neu schreiben musste, damit diese nur als Schnittstelle zu einer anderen  Anwendung dient.</p> <p>Alles in allem hatte ich an der Arbeit an diesem Projekt viel Spa\u00df und bin mit meinem Endergebnis zufrieden.</p>"},{"location":"Code.html","title":"Code","text":"<p>In diesem Abschnitt werde ich wichtige Code-Abschnitte aus meinem Quellcode erkl\u00e4ren und ihre nutzung erl\u00e4utern.</p> <pre><code>pub fn connect() -&gt; PooledConn {\nlet pool = Pool::new(URL).unwrap();\nlet conn = pool.get_conn().unwrap();\nreturn conn;\n}\n</code></pre> <p>Die funktion <code>connect</code> stellt die Verbindung zu der Datenbank zur\u00fcck und gibt dann diese Verbindung als Objekt zur\u00fcck. Diese Methode wird in jeder Methode benutzt, die in irgendeiner Weise mit  der Datenbank interagiert. Die URL die dieser Methode \u00fcbergeben wird, ist statisch und beinhaltet alles um sich mit der Datenbank zu verbinden (url, port, username, password).</p> <pre><code>pub fn get_id_by_session(\ncookie: String\n) -&gt; u32 {\nlet mut conn = db_layer::connection::connect();\nprintln!(\"{}\", cookie);\nlet query = \"SELECT user.id FROM user JOIN user_auth_cookie uac on user.id = uac.user_id WHERE uac.cookie = \\\"\".to_owned()+&amp;cookie.to_owned()+\"\\\"\";\nlet result = conn.query(query).unwrap();\nprintln!(\"GetIdBySession: {:?}\", result);\nif result.len() &gt;= 1 {\nreturn result[0];\n}\nreturn 0;\n}\n</code></pre> <p>Diese Methode bekommt den Session-Cookie \u00fcbergeben und gibt die zugeh\u00f6rige User-ID zur\u00fcck. Sollte der Session Cookie nicht in der Datenbank existieren, so gibt diese Funktion eine <code>0</code> zur\u00fcck. Diese User-ID ist keinem User zugewiesen, wodurch erkennbar ist, dass der Cookie ung\u00fcltig ist.</p> <pre><code>pub fn is_owner_of_manga_list(\ncookie: &amp;CookieJar&lt;'_&gt;,\nuser_list_id: u32\n) -&gt; bool{\nlet mut conn = db_layer::connection::connect();\nlet cookie_session = cookie.get(\"session\").unwrap().value();\nlet user_id = db_layer::user::get_id_by_session(cookie_session.to_string());\nlet query = \"SELECT user_id FROM user_list WHERE user_id = ? AND id = ?\";\nlet result: Vec&lt;u32&gt; = conn.exec(query, (user_id, user_list_id)).unwrap();\nif result.len() == 0 {\nreturn false\n}\nif result[0] &gt;= 1 {\nreturn true\n}\nreturn false\n}\n</code></pre> <p>Diese Methode nutzt die Methode <code>get_id_by_session</code> um aus dem Session-Cookie eine User-ID zu erhalten. Danach \u00fcberpr\u00fcfe ich, ob die \u00fcbergebene Listen-ID der erhaltenen User-ID geh\u00f6rt. Um Fehler zu vermeiden, \u00fcberpr\u00fcfe ich zuerst die l\u00e4nge des Ergebnisses, da es sonst zu einem <code>Index out of bounds</code> Fehler kommen kann. Wenn dies geschehen ist, gebe ich abh\u00e4ngig des Ergebnisses <code>true</code> oder <code>false</code> zur\u00fcck.</p>"},{"location":"Database.html","title":"Database","text":"<p>Die Datenbank besteht aus 5 Tabellen, welche alle miteinander verbunden sind.  Der Nutzer kann auf diese jedoch nicht direkt zugreifen und muss daf\u00fcr die API nutzen. Dadurch ist jeder Zugriff auf die Datenbank limitiert. Um das Projekt selbst nutzen zu k\u00f6nnen, kann eine Datenbank mit der passenden Struktur \u00fcber die SQL-Befehle in  CreateDB.txt erstellt werden.</p>"},{"location":"Database.html#aufbau-der-datenbank","title":"Aufbau der Datenbank","text":""},{"location":"Endpoints.html","title":"Endpoints","text":"<p>Diese Seite beinhaltet die Dokumentation f\u00fcr alle API Endpoints. Dazu geh\u00f6rt die URL, die Art der Request, die zu \u00fcbergebende JSON und der R\u00fcckgabewert. Das Format f\u00fcr jeden der API Endpoints ist <code>127.0.0.1:8080/api/[Link]</code></p>"},{"location":"Endpoints.html#get-mangaall","title":"GET <code>Manga/all</code>","text":"<p>Dieser Endpoint gibt alle Mangas, die in der Datenbank sind als JSON zur\u00fcck. Es werden alle Attribute der Mangas in der  Reihenfolge <code>id, name, chapters, finished, no_updates</code> zur\u00fcckgegeben.</p> Beispiel R\u00fcckgabewert <pre><code>[\n[\n1,\n\"test\",\n123,\nfalse,\nfalse\n]\n]\n</code></pre>"},{"location":"Endpoints.html#post-manga","title":"POST <code>Manga</code>","text":"<p>Dieser Endpoint erstellt einen neuen Manga in der Datenbank. Dazu ben\u00f6tigt der ausf\u00fchrende Benutzer Administrator-Rechte. Diese werden bei der Anfrage durch den Session-Cookie \u00fcberpr\u00fcft.</p> Beispiel \u00dcbergabewerte <pre><code>{\n\"name\": \"example\",\n\"chapters\": 1\n}\n</code></pre> Beispiel R\u00fcckgabewert <p>Bei Erfolg ist der R\u00fcckgabewert <code>1</code>. Sollte das Erstellen jedoch nicht funktioniert haben, ist der R\u00fcckgabewert <code>0</code>.  Dies kann daran liegen, dass der Benutzer nicht angemeldet ist oder nicht \u00fcber Administrator-Rechte verf\u00fcgt.</p>"},{"location":"Endpoints.html#get-userlistall","title":"GET <code>UserList/all</code>","text":"<p>Dieser Endpoint gibt alle Listen, die der User besitzt als JSON zur\u00fcck. Alle Attribute der Liste werden in der Reihenfolge <code>id, name, private, user_id</code> zur\u00fcckgegeben.</p> Beispiel R\u00fcckgabewerte <pre><code>[\n[\n1,\n\"test list\",\ntrue,\n1\n],\n[\n4,\n\"test list 12\",\ntrue,\n1\n],\n[\n10,\n\"test list 123\",\ntrue,\n1\n]\n]\n</code></pre>"},{"location":"Endpoints.html#post-userlist","title":"POST <code>UserList</code>","text":"<p>Dieser Endpunkt erstellt eine neue Liste f\u00fcr den Benutzer. Der aktuelle Benutzer wird \u00fcber den Session-Cookie \u00fcbergeben. Des Weiteren muss ein Name f\u00fcr die Liste in JSON Format \u00fcbergeben werden.</p> Beispiel \u00dcbergabewerte <pre><code>{\n\"name\": \"example\"\n}\n</code></pre> Beispiel R\u00fcckgabewerte <p>Bei Erfolg ist der R\u00fcckgabewert <code>1</code>. Sollte das erstellen jedoch nicht funktioniert haben, ist der R\u00fcckgabewert <code>0</code>. Dies kann daran liegen, dass der Benutzer nicht angemeldet ist oder bereits eine Liste mit dem Namen existiert.</p>"},{"location":"Endpoints.html#get-mangalistall","title":"GET <code>MangaList/all</code>","text":"<p>Dieser Endpunkt gibt alle Mangas, die der Benutzer in s\u00e4mtlichen Listen hat zur\u00fcck, wobei das Format der JSON Antwort <code>manga_list_id, manga_name, manga_current_chapter</code> ist. Der Benutzer wird \u00fcber den Session-Cookie ermittelt.</p> Beispiel R\u00fcckgabewerte <pre><code>[\n[\n1,\n\"test\",\n100\n],\n[\n2,\n\"test\",\n0\n]\n]\n</code></pre>"},{"location":"Endpoints.html#post-userlogin","title":"POST <code>/User/login</code>","text":"<p>Dieser Endpoint setzt den Session-Cookie des Benutzers, wenn dieser passende Anmeldedaten \u00fcbergibt.</p> Beispiel \u00dcbergabewerte <pre><code>{\n\"name\" : \"root\",\n\"password\": \"root\"\n}\n</code></pre> Beispiel R\u00fcckgabewerte <pre><code>{\n\"success\": true\n}\n</code></pre>"},{"location":"Endpoints.html#post-userlogout","title":"POST <code>User/logout</code>","text":"<p>Dieser Endpoint entfernt den Session-Cookie des Nutzers. Es gibt keinen R\u00fcckgabewert.</p>"},{"location":"Endpoints.html#post-userlistadd","title":"POST <code>UserList/add</code>","text":"<p>Dieser Endpoint f\u00fcgt einer Liste des Benutzers einen Manga hinzu.</p> Beispiel \u00dcbergabewerte <pre><code>{\n\"manga_id\": 1,\n\"user_list_id\": 1\n}\n</code></pre> Beispiel R\u00fcckgabewerte <p>Bei Erfolg ist der R\u00fcckgabewert <code>1</code>. Sollte das Hinzuf\u00fcgen jedoch nicht funktioniert haben, ist der R\u00fcckgabewert <code>0</code>. Dies kann daran liegen, dass der Benutzer nicht angemeldet ist, ihm die Liste nicht geh\u00f6rt oder der Manga oder die Liste nicht existiert.</p>"},{"location":"Endpoints.html#post-userlistupdate","title":"POST <code>UserList/update</code>","text":"<p>Dieser Endpoint kann Informationen \u00fcber das zuletzt gelesene Kapitel eines Mangas in einer Liste bearbeiten. Dies funktioniert nur bei Listen, die dem Benutzer auch geh\u00f6ren.</p> Beispiel \u00dcbergabewerte <pre><code>{\n\"manga_list_id\": 1,\n\"current_chapter\": 1\n}\n</code></pre> Beispiel R\u00fcckgabewerte <p>Bei Erfolg ist der R\u00fcckgabewert <code>1</code>. Sollte das bearbeiten jedoch nicht funktioniert haben, ist der R\u00fcckgabewert <code>0</code>. Dies kann daran liegen, dass der Benutzer nicht angemeldet ist, ihm die Liste nicht geh\u00f6rt oder dieser Manga nicht auf der Liste existiert.</p>"},{"location":"Endpoints.html#get-userlist","title":"GET <code>UserList</code>","text":"<p>Dieser Endpunkt gibt alle Mangas aus eine spezifische Benutzerliste mit dem Format <code>id, name, private, current_chapter</code> zur\u00fcck.</p> Beispiel \u00dcbergabewerte <pre><code>{\n\"id\": 1\n}\n</code></pre> Beispiel R\u00fcckgabewerte <pre><code>[\n[\n1,\n\"test\",\n1,\n100\n],\n[\n1,\n\"test\",\n1,\n0\n]\n]\n</code></pre>"},{"location":"Endpoints.html#post-mangaupdatechapter","title":"POST <code>Manga/update/chapter</code>","text":"<p>Dieser Endpunkt ist zum \u00c4ndern der Anzahl der Kapitel eines Mangas gedacht. F\u00fcr diese Aktion werden Administrator-Rechte ben\u00f6tigt.</p> Beispiel \u00dcbergabewerte <pre><code>{\n\"chapter\": 100,\n\"id\": 1\n}\n</code></pre> Beispiel R\u00fcckgabewerte <p>Bei Erfolg ist der R\u00fcckgabewert <code>1</code>. Sollte das Bearbeiten jedoch nicht funktioniert haben, ist der R\u00fcckgabewert <code>0</code>. Dies kann daran liegen, dass der Benutzer nicht angemeldet ist oder keine Administrator-Rechte besitzt.</p>"},{"location":"Endpoints.html#post-usercreate","title":"Post <code>User/create</code>","text":"<p>Dieser Endpunkt dient der Erstellung eines neuen Accounts in der Datenbank.</p> Beispiel \u00dcbergabewerte <pre><code>{\n\"name\": \"abc\",\n\"password\": \"password\"\n}\n</code></pre> Beispiel R\u00fcckgabewerte <p>Bei Erfolg ist der R\u00fcckgabewert <code>1</code>. Sollte das Erstellen eines neuen Accounts jedoch nicht funktioniert haben, ist der R\u00fcckgabewert <code>0</code>. Dies kann daran liegen, dass bereits ein Nutzer mit dem Name existiert.</p>"},{"location":"Herangehensweise.html","title":"Herangehensweise","text":"<p>Ich habe zun\u00e4chst damit begonnen, grob festzulegen, was f\u00fcr das Projekt erforderlich ist. Mein Ziel war es, die Liste von verschiedenen Endger\u00e4ten wie z.B. einem Handy, Laptop und PC erreichbar zu machen. Daher habe ich mich f\u00fcr die Nutzung einer Weboberfl\u00e4che mit einer API entschieden. Anschlie\u00dfend habe ich begonnen, eine simple Verbindung zwischen Rust und meiner Datenbank herzustellen. Dazu habe ich zun\u00e4chst eine Demo geschrieben, mit der es nur m\u00f6glich war, eine einzige Tabelle aus- und Daten einzugeben. Die Eingabem\u00f6glichkeiten waren vordefiniert und der Code alles in allem un\u00fcbersichtlich.</p> Demo Ausgeben <pre><code>pub fn get(\nconn: &amp;mut PooledConn,\ninput_type: &amp;str,\ninput_value: &amp;str\n) -&gt; Vec&lt;(u32, String, u32, bool, bool)&gt; {\nlet res:Vec&lt;(u32, String, u32, bool, bool)&gt; = conn.query(\n\"SELECT id, name, chapters, finished, no_updates FROM mangas WHERE \".to_owned() + &amp;input_type + \" = \\\"\" + &amp;input_value + \"\\\";\"\n)\n.unwrap();\nreturn res;\n}\n</code></pre> Demo Einf\u00fcgen <pre><code>pub fn create(\nconn: &amp;mut PooledConn,\nuser: &amp;User,\n) -&gt; std::result::Result&lt;String, Error&gt; {\nconn.exec_drop(r\"INSERT INTO user (name, password)\n    VALUES (:name, :password)\",\nparams! {\n\"name\" =&gt; user.name.clone(),\n\"password\" =&gt; user.password.clone(),\n},\n)\n.and_then(|_| Ok(user.name.clone()))\n}\n</code></pre> <p>Zu diesem Zeitpunkt habe ich noch nicht die Platzhalter von mysql genutzt, was meinen Code sehr un\u00fcbersichtlich gemacht hat. Dies habe ich jedoch in der aktuellsten Version der API bereits eingebaut.</p> Ausgeben <pre><code>pub fn get_all_user_mangas(\nmut cookie: String\n) -&gt; Vec&lt;(u32, String, u32)&gt; {\nlet mut conn = db_layer::connection::connect();\nlet query = \"SELECT ml.id, m.name, ml.current_chapter\nFROM user\n    JOIN user_list ul on user.id = ul.user_id\n    JOIN manga_list ml on ul.id = ml.user_list_id\n    JOIN mangas m on m.id = ml.manga_id\n    JOIN user_auth_cookie uac on user.id = uac.user_id\nwhere uac.cookie = ?\";\nlet result = conn.exec(query, (cookie, )).unwrap();\nreturn result;\n}\n</code></pre> Einf\u00fcgen <pre><code>pub fn add(\nmut new_manga: Json&lt;CreateManga&gt;\n) -&gt; u64 {\nlet mut conn = db_layer::connection::connect();\nlet query = \"INSERT INTO mangas (name, chapters) VALUES (?, ?)\";\nlet name = new_manga.name.to_owned();\nlet chapters:u32= new_manga.chapters;\nlet result = conn.exec_iter(query, (name, chapters)).unwrap();\nreturn result.affected_rows();\n}\n</code></pre> <p>Vor Beginn der eigentlichen Programmierung habe ich ein Use-Case-Diagramm erstellt, dass Funktionen, oder in meinem Fall, API-Endpoints erfasst, die f\u00fcr ein funktionst\u00fcchtiges Programm erforderlich sind.</p>"},{"location":"Herangehensweise.html#use-case-diagramm","title":"Use-Case-Diagramm","text":"<p>Bei diesem Use-Case-Diagramm gibt es 3 Akteure. Die Person ist nicht angemeldet und besitzt deshalb kine Funktionen au\u00dfer der Anmeldung und der erstellung eines Accounts. Wenn sich die Person erfolgreich anmeldet, wird diese zu einem Benutzer. Der Benutzer kann sich abmelden, Listen erstellen, diese bearbeiten, sich alle Mangas der Datenbank anzeigen und diese seinen Listen hinzuf\u00fcgen, Mangas aus seinen Listen entfernen, sich alle seine Listen anzeigen und sich den Inhalt seiner Listen Anzeigen. Hierbei erbt Manga hinzuf\u00fcgen von Manga anzeigen,  da der Benutzer ohne zu wissen welche Manga in der DB existieren keinen seiner Liste hinzuf\u00fcgen kann. Zuletzt gibt es einen Admin welcher alle Funktionen des Benutzers besitzt. Zus\u00e4tzlich kann dieser jedoch einen Manga erstellen und die Kapitel Anzahl dieser bearbeiten.</p>"},{"location":"Herangehensweise.html#sql-befehle","title":"SQL Befehle","text":"<p>Zu den Funktionen im Use-Case-Diagramm habe ich die passenden SQL Befehle erstellt. Diese habe ich anschlie\u00dfend in meiner API implementiert und mit Postman getestet. Dazu habe ich  einige Testf\u00e4lle durchgef\u00fchrt. Alle SQL Befehle des Use-Case-Diagramms sind in dem folgenden Abschnitt aufgelistet.</p> Anmelden <pre><code>SELECT user.id FROM user WHERE name = ? AND password = ?;\n</code></pre> Benutzer erstellen <pre><code>INSERT INTO user (name, password) VALUES (?, ?);\n</code></pre> Liste erstellen <pre><code>INSERT INTO user_list (name, user_id) VALUES (?, ?);\n</code></pre> Manga anzeigen <pre><code>SELECT id, name, chapters, finished, no_updates FROM mangas;\n</code></pre> Manga hinzuf\u00fcgen <pre><code>INSERT INTO manga_list (manga_id, user_list_id, current_chapter) VALUES (?, ?, 0);\n</code></pre> Manga entfernen <pre><code>\n</code></pre> Listen anzeigen <pre><code>SELECT id, name, private, user_id FROM user_list WHERE user_id = ?;\n</code></pre> Inhalt von Liste anzeigen <pre><code>SELECT mangas.id, mangas.name, ul.private, ml.current_chapter FROM mangas JOIN manga_list ml on mangas.id = ml.manga_id JOIN user_list ul on ul.id = ml.user_list_id JOIN user u on u.id = ul.user_id WHERE ul.id = ? AND u.id = ?;\n</code></pre> Manga erstellen <pre><code>INSERT INTO mangas (name, chapters) VALUES (?, ?);\n</code></pre> Kapitelanzahl \u00e4ndern <pre><code>UPDATE mangas SET chapters = ? WHERE id = ?;\n</code></pre>"},{"location":"Herangehensweise.html#testfalle","title":"Testf\u00e4lle","text":"API Request \u00dcbergebene Daten Antwort Andere entscheidende Faktoren 127.0.0.1:8080/api/User/create \"name\": \"abc\", \"password\": \"password\" 0 Nicht als Admin angemeldet 127.0.0.1:8080/api/User/login \"name\" : \"test\", \"password\": \"test\" {\"success\":true} Account existiert 127.0.0.1:8080/api/User/logout 1 127.0.0.1:8080/api/Manga/all [[1,\"test\",100,false,false],[2,\"example\",1,false,false]] 127.0.0.1:8080/api/MangaList/all [] Keine Listen auf auf dem Account test vorhanden <p>Solche Testf\u00e4lle habe ich f\u00fcr jeden API-Endpoint mehrfach durchgef\u00fchrt, um sicherzustellen, dass alles funktioniert und auch bei z.B. einem fehlenden Cookie kein Fehler auftritt. F\u00fcr  fehlende Attribute in der Request habe ich jedoch noch keine R\u00fcckgabe eingerichtet. Die library Rocket gibt dabei die Standard-Webseite f\u00fcr den Error-Code 400 oder 422 zur\u00fcck.</p>"},{"location":"Herangehensweise.html#projekttagebuch-der-aktuellen-version","title":"Projekttagebuch der Aktuellen version","text":"<p>Das Projekttagebuch ist f\u00fcr die gesamte Arbeit an der API. Das bedeutet, dass alles an Recherche und Erarbeitung von Wissen hier nicht enthalten ist und sich diese Auflistung nur mit reinem Fortschritt am Projekt besch\u00e4ftigt.</p> Datum Beschreibung Status 14.6.23 Grundstruktur des Projektes wurde erstellt Abgeschlossen 14.6.23 API Endpoints f\u00fcr Manga erstellt Abgeschlossen 14.6.23 Struktur f\u00fcr Rocket erstellt Abgeschlossen 14.6.23 API Endpoint f\u00fcr User List erstellt Abgeschlossen 14.6.23 API Endpoint zum erstellen von Mangas erstellt Abgeschlossen 14.6.23 Structs f\u00fcr Manga, User und User List erstellt Abgeschlossen 20.6.23 API Endpoint um alle Mangas eines Benutzers zu erhalten erstellt Abgeschlossen 20.6.23 UUID-v4 f\u00fcr die erstellung des Session-Cookie hinzugef\u00fcgt Abgeschlossen 20.6.23 API Endpoint f\u00fcr Login erstellt Begonnen 21.6.23 API Endpoint f\u00fcr Login erstellt Abgeschlossen 22.6.23 API Endpoint zum erstellen eines Mangas bearbeitet Abgeschlossen 22.6.23 Das Erstellen einer Liste nutzt nun den Session-Cookie f\u00fcr die User ID Abgeschlossen 22.6.23 Text Datei mit den SQL Befehlen zum erstellen der Datenbank erstellt Abgeschlossen 22.6.23 M\u00f6glichen Fehlerquelle beim erstellen eines Mangas beseitigt Abgeschlossen 23.6.23 API Endpoint zum erstellen von Listen bearbeitet Abgeschlossen 23.6.23 API Endpoint erstellt, der einer Liste einen Manga hinzuf\u00fcgen kann Abgeschlossen 23.6.23 Funktion erstellt, die Pr\u00fcft ob einer User ID eine Liste geh\u00f6rt Abgeschlossen 23.6.23 API Endpoint zum Aktualisieren des aktuellen Kapitel hinzugef\u00fcgt Abgeschlossen 23.6.23 Alle API Endpoints bekommen die User ID jetzt \u00fcber den Session Cookie Abgeschlossen 23.6.23 API Endpoint um eine spezifische Liste zu erhallten erstellt Abgeschlossen 23.6.23 API Endpoint zum \u00e4ndern der Kapitel anzahl eines Mangas erstellt Abgeschlossen 23.6.23 API Endpoint zum registrieren erstellt Abgeschlossen 23.6.23 Rocket config Datei erstellt Abgeschlossen <p>Mit MD Table Generator erstellt.</p>"},{"location":"Projektziele.html","title":"Projektziele","text":"<p>Unter diesem Abschnitt sind die urspr\u00fcnglichen Ziele bei der Erstellung des Programms zu finden.</p> <p>Ich m\u00f6chte ein Programm schreiben, bei dem sich Benutzer anmelden k\u00f6nnen. Nutzer k\u00f6nnen den Admin Status besitzen. Jeder Benutzer kann f\u00fcr sich Listen erstellen.  Diese Listen haben einen Namen. Der Nutzer kann seiner Liste Mangas (Comics) hinzuf\u00fcgen, entfernen und das aktuelle Kapitel \u00e4ndern. Die Anzahl der Kapitel k\u00f6nnen nicht vom  Benutzer ge\u00e4ndert werden. Ein Admin kann neue Mangas anlegen. Der Benutzer soll sich alle, auch die noch nicht fertig gelesenen Mangas ausgeben k\u00f6nnen. Das Programm wird \u00fcber eine API gesteuert.  Die Passw\u00f6rter des Users sollen als Hash mit Salt in der DB  gespeichert werden. Die Datenbank wird auf einem Raspberry Pi aufgesetzt, damit sie von verschiedenen Ger\u00e4ten erreichbar ist. Sp\u00e4ter soll ein Discord Bot Benutzern die Funktion geben, Benachrichtigungen zu erhalten, wenn ein neues Kapitel zu einem Manga auf ihrer Liste erscheint. Dazu wird der Benutzer  mit einem Discord Namen verkn\u00fcpft. \u00dcber Discord sollen sp\u00e4ter auch Mangas der Benutzerliste hinzugef\u00fcgt und Listen erstellt werden k\u00f6nnen.  Danach m\u00f6chte ich eine Weboberfl\u00e4che erstellen. Diese soll auch auf dem Raspberry Pi laufen und auch f\u00fcr Mobile Ger\u00e4te funktionieren.</p>"},{"location":"Structs.html","title":"Structs","text":"<p>In Rust werden statt Klassen Structs verwendet. Dabei handelt es sich um Klassen, die keine Methoden besitzen. Das bedeutet, dass ein Struct der Bauplan f\u00fcr das Speichern von Daten ist. Deshalb habe ich f\u00fcr jede der Tabellen in der Datenbank und alle R\u00fcckgabewerte der API ein Struct erstellt.</p> Implementierung eines Struct f\u00fcr <code>user</code> <pre><code>pub struct User {\npub id: u32,\npub name: String,\npub password: String,\npub admin: bool\n}\n</code></pre> <p>Bei einem Struct kann genau wie in einer Java-Klasse angegeben werden, ob dieser <code>public</code> oder <code>private</code>. Da ich f\u00fcr meine Structs eigene Dateien angelegt habe, sind bei mir alle Structs und zugeh\u00f6rige Attribute public. Einige der von mir implementierten Structs sind sehr kurz und k\u00f6nnten daher auch weggelassen werden. Ich wollte jedoch der besseren \u00dcbersicht wegen auch f\u00fcr einfache Datens\u00e4tze Vorlagen erstellen.</p>"},{"location":"Structs.html#user","title":"User","text":"user structs"},{"location":"Structs.html#logic","title":"Logic","text":"logic structs"},{"location":"Structs.html#manga","title":"Manga","text":"manga structs"},{"location":"Structs.html#userlist","title":"UserList","text":"user_list structs"}]}